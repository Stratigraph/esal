# Event objects and event sequence objects
#
# Copyright (c) 2015 Aubrey Barnard.  This is free software.  See
# LICENSE for details.

import collections


# Export public API
__all__ = (
    'Event',
    )


# An event in a sequence
Event = collections.namedtuple('Event', 'seq, time, dura, ev, val')
Event.__doc__ = """
Event(sequence_id, start_time, duration, event, value)

An event is a tuple of values representing the occurrence of an event in
a sequence.  The fields are ordered so that events have a useful default
sort order and are as follows.  The fields can be accessed by index,
name, or attribute reference.

* sequence_id, 'seq': ID of the containing sequence
* start_time, 'time': When this event happened.  Can be integer, float,
  date, time, or datetime.
* duration, 'dura': How long the event lasted in a form compatible with
  the start time.  Can be omitted for point events.
* event, 'ev': Type of this event
* value, 'val': Value of this event.  Can be omitted for binary-valued
  events.

For example, a blood pressure measurement could be represented by the
following two events:

    Event(patient0123456789, '2015-04-25T11:39', None, bpSystolic, 120)
    Event(patient0123456789, '2015-04-25T11:39', None, bpDiastolic, 80)
""".lstrip()

# Override Event.__new__ to enable default values
def _event_new(cls, seq=None, time=None, dura=None, ev=None, val=None):
    # Copy from the source for Event.__new__ generated by namedtuple
    return tuple.__new__(cls, (seq, time, dura, ev, val))
_event_new.__doc__ = Event.__new__.__doc__
Event.__new__ = _event_new

# Override Event.__getitem__ to enable lookup by name
def _event_getitem(self, index):
    """Looks up event fields by name or index."""
    if isinstance(index, str):
        if index == 'seq':
            return self[0]
        elif index == 'time':
            return self[1]
        elif index == 'dura':
            return self[2]
        elif index == 'ev':
            return self[3]
        elif index == 'val':
            return self[4]
        else:
            raise KeyError(index)
    else:
        return super(Event, self).__getitem__(index)
Event.__getitem__ = _event_getitem


class _EventSequence(object): # TODO
    """A sequence of events."""

    def __init__(self, sequence_id, events):
        # Initialize members
        self._seq_id = sequence_id
        self._events = []
        self._times = None
        self._duras = None
        self._values = None
        # Set members from 'events' depending on type
        for idx, event in enumerate(events):
            pass
