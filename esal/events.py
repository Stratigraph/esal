# Event objects and event sequence objects
#
# Copyright (c) 2015 Aubrey Barnard.  This is free software.  See
# LICENSE for details.

import collections


# Export public API
__all__ = (
    'Event',
    )


# An event in a sequence
Event = collections.namedtuple('Event', 'seq, time, dura, ev, val')
Event.__doc__ = """
Event(sequence_id, start_time, duration, event, value)

An event is a tuple of values representing the occurrence of an event in
a sequence.  The fields are ordered so that events have a useful default
sort order and are as follows.

* sequence_id: ID of the containing sequence
* start_time: When this event happened.  Can be integer, float, date, time,
    or datetime.
* duration: How long the event lasted in a form compatible with the start
    time.  Can be omitted for point events.
* event: Type of this event
* value: Value of this event.  Can be omitted for binary-valued events.

For example, a blood pressure measurement could be represented by the
following two events:

    Event(patient0123456789, '2015-04-25T11:39', None, bpSystolic, 120)
    Event(patient0123456789, '2015-04-25T11:39', None, bpDiastolic, 80)
""".lstrip()

# Override Event.__new__ to enable default values
def _new_event(cls, seq=None, time=None, dura=None, ev=None, val=None):
    # Copy from the source for Event.__new__ generated by namedtuple
    return tuple.__new__(cls, (seq, time, dura, ev, val))
_new_event.__doc__ = Event.__new__.__doc__
Event.__new__ = _new_event


class _EventSequence(object): # TODO
    """A sequence of events."""

    def __init__(self, sequence_id, events):
        # Initialize members
        self._seq_id = sequence_id
        self._events = []
        self._times = None
        self._duras = None
        self._values = None
        # Set members from 'events' depending on type
        for idx, event in enumerate(events):
            pass
